Суть любой декомпозиции — в разделении большого и сложного на маленькое и простое.
В этом уроке расскажем, как декомпозиция помогает при разработке пользовательских интерфейсов.

Декомпозиция интерфейса
Декомпозиция интерфейса — процесс разделения приложения на отдельные блоки.
Это позволяет добавлять функциональность, исправлять баги, реорганизовывать UI и управлять составными частями приложения независимо друг от друга. Разделение ответственности — одна из самых важных задач в программировании, и от её успешного решения зависит надёжность и масштабируемость системы. Почти как у Макиавелли: «Разделяй и властвуй».

Блоки одного цвета имеют общую структуру, но разное содержимое.
Мы можем описать для них общий HTML, CSS и JavaScript в одном компоненте, присвоить ему имя и потом просто «призывать» его в нужном месте, меняя лишь содержимое.

Но как понять, должен ли элемент интерфейса стать компонентом?
Когда стоит разбивать один компонент на несколько более мелких?
Обычно это решение принимает разработчик.
Но есть и несколько общих правил декомпозиции интерфейса:

1. Если приложение усложняется и код компонентов в редакторе разрастается на несколько экранов — время задуматься о декомпозиции.

2. Следуйте принципу DRY — Don't repeat yourself (англ. «не повторяйтесь»).
Например, если код кнопки повторяется, стоит выделить его в самостоятельный компонент и использовать внутри других компонентов.
Если позже захотите доработать такую кнопку, изменения применятся во всех местах её использования — в этом и смысл компонентов.

3. Мысленно разделите приложение на функциональные блоки.
Например, в интернет-магазине это могут быть корзина, карточка товара, фильтр, личный кабинет, подвал сайта, поиск.
Когда разобьёте приложение на части, сможете быстрее находить повторяющиеся элементы и декомпозировать пользовательский интерфейс.



