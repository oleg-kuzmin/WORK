// В предыдущем уроке мы разобрали особенности рендеринга разметки и преобразования ReactDOM в DOM.
// Настало время узнать, что же стоит за этим колдовством.

// Как вы помните, элемент в React — простой объект. Рассмотрим код элемента:

React.createElement("section", null, [
  React.createElement("div", null, [
    React.createElement("h1", null, "Заголовок"),
    React.createElement("h2", null, "Подзаголовок"),
  ]),
  React.createElement("div", null, React.createElement("p", null, "Параграф")),
]);

// Так выглядит дерево элементов в React.

// Этот код можно представить в упрощённом виде:
{
  element: "section";
  children: [
    {
      element: "div",
      children: [
        {
          element: "h1",
          children: "Заголовок",
        },
        {
          element: "h2",
          children: "Подзаголовок",
        },
      ],
    },
    {
      element: "div",
      children: [
        {
          element: "p",
          children: "Параграф",
        },
      ],
    },
  ];
}

// Здесь представлена древовидная структура объектов.
// В ней один корневой объект "section" содержит несколько дочерних — они указаны у него в children.
// А дочерние элементы тоже содержат свои children.
// У дерева объектов может быть огромное количество уровней вложенности.
// Именно такая структура передаётся в функцию ReactDOM.render, где и происходит магия Virtual DOM.


// React использует эту структуру данных для двух целей:
// 1. На её основе строятся и вставляются на страницу реальные DOM-элементы
// (с помощью document.createElement и appendChild), а также вызывается рендер компонентов.
// В результате рендера компонентов это «дерево», а с ним и реальный DOM, «обрастают» дополнительными ветвями, структура которых была описана в компонентах.

// 2. React хранит в ней виртуальный DOM (англ. Virtual DOM) — виртуальную копию текущей структуры DOM.
// При последующих рендерах обновлённая структура поэлементно сравнивается с последней сохранённой копией.
// Это позволяет React определять нужное количество изменений и применять их в реальном DOM.


// Такой подход к созданию HTML-разметки сложнее, чем написание HTML в .html файлах, но он необходим,
// потому что большинство операций с реальным DOM трудозатратны для браузера и пользовательских устройств.
// Алгоритм React, который называется “reconciliation” (англ. «согласование»), сводит количество таких операций к минимуму.
// Сравнение двух даже сложных JavaScript-объектов во много раз быстрее, чем аналогичные операции над DOM-деревом.
// Такой алгоритм позволяет React сохранить высокую скорость работы в приложениях с большим количеством меняющихся данных.
