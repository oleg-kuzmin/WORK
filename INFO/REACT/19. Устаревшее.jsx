componentWillMount
componentWillReceiveProps
componentWillUpdate
componentDidMount
shouldComponentUpdate

// TODO componentDidMount
// Рождение - исполняется один раз при (рождении) монтировании - когда компонент вставлен в DOM

// TODO componentWillReceiveProps
// Этот метод можно сравнить с тем, что происходит, когда кто-то получает от кого-то подарок.
// Так, компонент может получать свойства от родительского компонента.
// Каждый раз, когда компонент принимает свойства, вызывается этот метод.
// При этом данный метод вызывается каждый раз, когда родительский компонент передаёт свойства дочернему компоненту, а не только тогда, когда это случается в первый раз.
// Например, если родительский компонент решит поменять свойства, переданные дочернему компоненту, то мы, в методе componentWillReceiveProps()​, сможем, например, проверить, отличаются ли новые свойства от тех, что уже были переданы компоненту.
// Дело в том, что если новые свойства не отличаются от старых, это значит, что их поступление ничего не меняет, а значит — мы можем, выяснив это, больше ничего не делать.
// Если же новые свойства отличаются от старых, мы можем выполнить некие действия.
// Обычно этот метод объявляют в теле класса компонента в таком виде:
// componentWillReceiveProps(nextProps) {}
// Тут обычно используется, в качестве имени параметра, ​ nextProps​ , но назвать этот параметр можно как угодно.
// Для того чтобы сравнить некое конкретное свойство, которое уже было передано компоненту, с тем, что уже было ему передано ранее, и принять решение о дальнейших действиях, можно воспользоваться такой конструкцией:
// componentWillReceiveProps(nextProps) {
//   if (nextProps.whatever !== this.props.whatever) {
//   сделать тут что-то важное
//   }
// }

// TODO shouldComponentUpdate
// Он, если продолжить сравнение компонента с человеком, напоминает момент, когда человек // размышляет о том, надо ли ему переодеться или нет. В обычных условиях, если React не вполне уверен в том, надо ли повторно отрендерить компонент, он его, на всякий случай, всё же отрендерит. При этом неважно — нужно ли это, в соответствии с логикой приложения, или нет. Это приводит к тому, что React повторно рендерит компоненты даже в тех случаях, когда ничего, имеющего отношение к компоненту, не меняется. Подобное может привести к замедлению приложения, так как по такому принципу React обрабатывает все компоненты, входящие в состав приложения. Метод shouldComponentUpdate()​даёт разработчику возможность оптимизировать приложение. Здесь можно реализовать некую логику, помогающую выяснить необходимость обновления компонента. Этот метод обычно объявляют так:
// shouldComponentUpdate(nextProps, nextState) {
// вернуть true если компонент нуждается в обновлении
// вернуть false в противном случае
// }
// При этом из этого метода, если компонент нуждается в повторном рендеринге, с учётом новых свойств и состояния, нужно вернуть ​true​. В противном случае из него нужно вернуть ​ false​ . Собственно говоря, возврат ​ false​из этого метода приводит к тому, что обновление компонента не выполняется и приложение работает быстрее, но, делая это, нужно быть уверенным в том, что компоненту действительно не требуется повторный рендеринг. Если же компоненту нужно обновиться, а этот метод вернул ​ false​— это приведёт к появлению ошибок, с которыми будет сложно бороться.