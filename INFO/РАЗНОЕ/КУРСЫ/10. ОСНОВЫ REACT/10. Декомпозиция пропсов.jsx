// В предыдущих уроках мы рассказывали про компоненты, их извлечение и композицию, а также о продвинутых техниках использования пропсов.
// В этом уроке разберём, как не допустить возврата в эпоху императивной разработки при использовании пропсов в сложных компонентах.

// По мере развития приложения возникает необходимость добавлять в компонент дополнительные пропсы.
// Сначала один, потом другой, не успеете оглянуться, как окажется, что компонент ждёт десяток другой аргументов.

// Взгляните на пример сложного компонента OrderContent:
// Плохой пример
<OrderContent
  orderId={"ADF-21244324-11"}
  addressCoords={[56.033661, 37.859848]}
  addressName="ул. 26 Бакинских Комиссаров, дом 11"
  mapProvider="yandex"
  products={
    [
      { id: 12, name: "Ватные диски", count: 2 },
      { id: 45, name: "Корм для рыбок", count: 1 },
      { id: 78, name: "Гранатовый сок", count: 4 }
    ]
  }
  time="25.09.2021 14:33:24"
  customerName="Евгения Лучинова"
  customerEmail="email.pochta@example.com"
  customerPhone={"+7 (495) 777-77-77"}
  productsView="list"
  totalPrice={1293.30}
  favoriteProduct={{ id: 78, name: "Гранатовый сок" }}
  onCancelOrder={
    showNotification(
      "Вы уверены, что хотите отменить заказ?",
      { onConfirm: cancelOrder, onCancel: Modal.active.close }
    )
  }
  onSubmitOrder={proceedToPayement}
  onChangeFavoriteProduct={setFavorite}
  onChangeProductView={toggleView}
  onApplyCode={
    showPrompt(
      "Введите промокод:",
      { onSubmit: applyCode, onCancel: Modal.active.close }
    )
  }
  shouldSaveAddress={true}
/>;

// Поддерживать такой код трудно, а порой и опасно: одно неверное движение, и весь компонент перестанет работать,
// а внутренняя реализация такого компонента будет занимать не одну сотню строк кода.

// React не ограничивает ни тип пропсов, ни их количество, но злоупотреблять ими не стоит, гораздо лучше прибегнуть к декомпозиции:
// Хороший пример

<OrderContent>
  <OrderInfo time="25.09.2021 14:33:24" orderId={"ADF-21244324-11"} />
  <Customer {...customer} />
  <Products data={products} />
  <Address
    addressCoords={[56.033661, 37.859848]}
    addressName="ул. 26 Бакинских Комиссаров, дом 11"
    mapProvider="yandex"
  />
  <PromoCodeComponent />
  <span className="total-price">1293.30</span>
  <OrderControls />
</OrderContent>

// В этом примере много компонентов, а пропсы разделены по смыслу: всё, что связано с адресом, мы передаём компоненту Address, у компонента Customer тоже своя узкая задача и так далее. Такой код легко поддерживать, а добавление новых функциональных возможностей не подвергает опасности работоспособность всего приложения.

// Когда пропсов становится слишком много — это знак, что стоит применить декомпозицию. Старайтесь не допускать их «разрастания», когда пишете код. Это сэкономит время и нервы в будущем, и коллеги будут вам благодарны. В следующем уроке расскажем про ещё один приём, который может быть полезен при декомпозиции.



