// В предыдущих уроках вы разобрались с компонентами и их пропсами в React.
// Вы уже знаете, что влиять на логику работы и отображение компонентов можно через пропсы.
// В React есть ещё один инструмент для влияния на компонент — внутреннее состояние компонента.

// Благодаря состоянию компоненты могут реагировать на действия пользователя, ответы сервера и другие события и при этом не нарушать принцип чистоты компонентов. Но начнём с основ — расскажем, что такое внутреннее состояние компонентов в React.

// * Что такое внутреннее состояние
// Состояние окружает нас в повседневной жизни: компьютер включён, время суток — вечер, музыка — играет.
// В пользовательских интерфейсах, у компонентов и созданных с их помощью приложений тоже может быть состояние: меню раскрыто, тёмная тема оформления включена, пользователь авторизован, данные загружаются.

// В интернет-магазине список товаров, состав корзины, наличие активных заказов, применённые фильтры и промокод — всё это состояние.

// Оно может меняться от действий пользователя и внутренних процессов в приложении, а эти изменения влияют на логику работы и отображение пользовательского интерфейса. Библиотека React предоставляет мощный инструментарий для управления внутренним состоянием компонентов и построения динамических пользовательских интерфейсов.

// * Состояние в React-компонентах
// В React внутреннее состояние классового компонента задаётся с помощью свойства state.
// Компонент перерисовывается, когда state изменяется.
// Состояние очень похоже на пропсы, за исключением того, что оно задаётся внутри компонента, а не приходит снаружи.
// Чуть позже покажем, как state и props работают вместе.

// Вот пример компонента с внутренним состоянием:
class ThemeToggle extends React.Component {
  state = { theme: "светлая" };
  render() {
    return (
      <div>
        <p>Включена {this.state.theme} тема</p>
      </div>
    );
  }
}

// Компонент содержит в себе состояние: { theme: "светлая" }.
// Опираясь на это состояние, можно создавать потрясающие вещи, например добавить тёмную тему в приложение:
class ThemeToggle extends React.Component {
  state = { theme: "светлая" };
  render() {
    return (
      <div className={this.state.theme === "светлая" ? "th-light" : "th-dark"}>
        <p>Включена {this.state.theme} тема</p>
      </div>
    );
  }
}

// В этом примере применяется разный класс к элементу div в зависимости от значения this.state.theme.
// А этот класс, в свою очередь, влияет на цветовую схему.

// * Иерархия и форма состояния в React-компонентах
// Как и props, state может быть иерархичным и принимать любую форму:
state = {
  theme: "светлая",
  posts: [
    { id: 1, title: "Новость 1" },
    { id: 2, title: "Новость 2" }
  ],
  commentsEnabled: true,
  user: {
    name: "Гекльберри Финн",
    uuid: "123e4567-e89b-12d3-a456-426655440000",
    lastActive: 1614498769824
  }
};

// В этом примере в state хранится информация о теме, применённой в приложении, и текущем пользователе — его имя, идентификатор, время последней активности, настройка доступности комментариев, список новостей. Объект state можно использовать для описания любой «модели данных», на которую хватит фантазии.



