// подключаем сторонний модуль filesystem 
const fs = require('fs');


// чтение файла метод fs.readFile() - асинхронная функция
Аргументы:
- путь до файла,
- кодировка,
- колбек или обычная функция, которая сработает когда мы вызовем метод

fs.readFile('./test.txt', (error, data) => {
  console.log(data.toString());
});
fs.readFile('./test.txt', 'utf8', (error, data) => {
  console.log(data);
});


// создание нового файла метод fs.writeFile()
Аргументы:
- путь до файла,
- данные,
- колбек или обычная функция, которая сработает когда мы вызовем метод

fs.readFile('./test.txt', 'utf8', (error, data) => {
  fs.writeFile('./files/test2.txt', `${data} New text`, () => {
    error ? console.log(error) : null;
  })
});


// создание папки метод fs.mkdir() 
Аргументы:
- путь до папки,
- колбек или обычная функция, которая сработает когда мы вызовем метод
fs.readFile('./test.txt', 'utf8', (error, data) => {
  fs.mkdir('./files', () => {
    fs.writeFile('./files/test2.txt', `${data} New text`, (error) => {
      error ? console.log(error) : null;
    });
  });
});


// все функции асинхронные, можно воспользоваться Promise или async/await
также есть аналоги (синхронные)
fs.readFileSync
fs.mkdirSync
fs.writeFileSync
fs.unlinkSync


// удаление файла метод fs.unlink()
Аргументы:
- путь до файла,
- колбек или обычная функция, которая сработает когда мы вызовем метод
fs.unlink('./files/test2.txt', () => {})


// удаление папки метод fs.rmdir()
Аргументы:
- путь до файла,
- колбек или обычная функция, которая сработает когда мы вызовем метод
fs.rmdir('./files', () => {})


// проверка на наличие файла или папки метод fs.existsSync()
Аргументы:
- путь до файла,

setTimeout(() => {
  if (fs.existsSync('./files/test2.txt')) {
    fs.unlink('./files/test2.txt', () => {})
  }  
}, 4000);

setTimeout(() => {
  if (fs.existsSync('./files/test2.txt')) {
    fs.rmdir('./files', () => {})
  }  
}, 6000);